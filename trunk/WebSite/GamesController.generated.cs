// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace WebSite.Controllers
{
    public partial class GamesController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected GamesController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AcceptChallenge()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AcceptChallenge);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CancelChallenge()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CancelChallenge);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Game()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Game);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public GamesController Actions { get { return MVC.Games; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Games";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Games";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string NewGame = "NewGame";
            public readonly string AcceptChallenge = "AcceptChallenge";
            public readonly string AcceptGameFailure = "AcceptGameFailure";
            public readonly string CancelChallenge = "CancelChallenge";
            public readonly string CancelGameSuccess = "CancelGameSuccess";
            public readonly string CancelGameFailure = "CancelGameFailure";
            public readonly string Game = "Game";
            public readonly string NonGameParticipant = "NonGameParticipant";
            public readonly string Games = "Games";
            public readonly string Notifications = "Notifications";
            public readonly string PendingGames = "PendingGames";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string NewGame = "NewGame";
            public const string AcceptChallenge = "AcceptChallenge";
            public const string AcceptGameFailure = "AcceptGameFailure";
            public const string CancelChallenge = "CancelChallenge";
            public const string CancelGameSuccess = "CancelGameSuccess";
            public const string CancelGameFailure = "CancelGameFailure";
            public const string Game = "Game";
            public const string NonGameParticipant = "NonGameParticipant";
            public const string Games = "Games";
            public const string Notifications = "Notifications";
            public const string PendingGames = "PendingGames";
        }


        static readonly ActionParamsClass_NewGame s_params_NewGame = new ActionParamsClass_NewGame();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_NewGame NewGameParams { get { return s_params_NewGame; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_NewGame
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_AcceptChallenge s_params_AcceptChallenge = new ActionParamsClass_AcceptChallenge();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AcceptChallenge AcceptChallengeParams { get { return s_params_AcceptChallenge; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AcceptChallenge
        {
            public readonly string userGameDataId = "userGameDataId";
            public readonly string opponentUserId = "opponentUserId";
        }
        static readonly ActionParamsClass_CancelChallenge s_params_CancelChallenge = new ActionParamsClass_CancelChallenge();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CancelChallenge CancelChallengeParams { get { return s_params_CancelChallenge; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CancelChallenge
        {
            public readonly string userGameDataId = "userGameDataId";
        }
        static readonly ActionParamsClass_Game s_params_Game = new ActionParamsClass_Game();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Game GameParams { get { return s_params_Game; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Game
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string AcceptGameFailure = "AcceptGameFailure";
                public readonly string CancelGameFailure = "CancelGameFailure";
                public readonly string CancelGameSuccess = "CancelGameSuccess";
                public readonly string Game = "Game";
                public readonly string Games = "Games";
                public readonly string NewGame = "NewGame";
                public readonly string NewGameSuccess = "NewGameSuccess";
                public readonly string NonGameParticipant = "NonGameParticipant";
                public readonly string Notifications = "Notifications";
                public readonly string PendingGames = "PendingGames";
            }
            public readonly string AcceptGameFailure = "~/Views/Games/AcceptGameFailure.cshtml";
            public readonly string CancelGameFailure = "~/Views/Games/CancelGameFailure.cshtml";
            public readonly string CancelGameSuccess = "~/Views/Games/CancelGameSuccess.cshtml";
            public readonly string Game = "~/Views/Games/Game.cshtml";
            public readonly string Games = "~/Views/Games/Games.cshtml";
            public readonly string NewGame = "~/Views/Games/NewGame.cshtml";
            public readonly string NewGameSuccess = "~/Views/Games/NewGameSuccess.cshtml";
            public readonly string NonGameParticipant = "~/Views/Games/NonGameParticipant.cshtml";
            public readonly string Notifications = "~/Views/Games/Notifications.cshtml";
            public readonly string PendingGames = "~/Views/Games/PendingGames.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_GamesController : WebSite.Controllers.GamesController
    {
        public T4MVC_GamesController() : base(Dummy.Instance) { }

        partial void NewGameOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult NewGame()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.NewGame);
            NewGameOverride(callInfo);
            return callInfo;
        }

        partial void NewGameOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Contracts.ViewModels.GameModel model);

        public override System.Web.Mvc.ActionResult NewGame(Contracts.ViewModels.GameModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.NewGame);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            NewGameOverride(callInfo, model);
            return callInfo;
        }

        partial void AcceptChallengeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int userGameDataId, int opponentUserId);

        public override System.Web.Mvc.ActionResult AcceptChallenge(int userGameDataId, int opponentUserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AcceptChallenge);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userGameDataId", userGameDataId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "opponentUserId", opponentUserId);
            AcceptChallengeOverride(callInfo, userGameDataId, opponentUserId);
            return callInfo;
        }

        partial void AcceptGameFailureOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult AcceptGameFailure()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AcceptGameFailure);
            AcceptGameFailureOverride(callInfo);
            return callInfo;
        }

        partial void CancelChallengeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int userGameDataId);

        public override System.Web.Mvc.ActionResult CancelChallenge(int userGameDataId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CancelChallenge);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userGameDataId", userGameDataId);
            CancelChallengeOverride(callInfo, userGameDataId);
            return callInfo;
        }

        partial void CancelGameSuccessOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult CancelGameSuccess()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CancelGameSuccess);
            CancelGameSuccessOverride(callInfo);
            return callInfo;
        }

        partial void CancelGameFailureOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult CancelGameFailure()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CancelGameFailure);
            CancelGameFailureOverride(callInfo);
            return callInfo;
        }

        partial void GameOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? id);

        public override System.Web.Mvc.ActionResult Game(int? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Game);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            GameOverride(callInfo, id);
            return callInfo;
        }

        partial void NonGameParticipantOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult NonGameParticipant()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.NonGameParticipant);
            NonGameParticipantOverride(callInfo);
            return callInfo;
        }

        partial void GamesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Games()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Games);
            GamesOverride(callInfo);
            return callInfo;
        }

        partial void NotificationsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Notifications()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Notifications);
            NotificationsOverride(callInfo);
            return callInfo;
        }

        partial void PendingGamesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult PendingGames()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PendingGames);
            PendingGamesOverride(callInfo);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591
